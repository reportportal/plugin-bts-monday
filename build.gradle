plugins {
    id "io.spring.dependency-management" version "1.1.4"
    id 'java'
    id 'jacoco'
    id "com.github.spotbugs" version "4.0.0"
    id "com.github.node-gradle.node" version "2.2.1"
    id "com.apollographql.apollo3" version "3.8.2"
}

apply from: 'project-properties.gradle'

def scriptsUrl = 'https://raw.githubusercontent.com/reportportal/gradle-scripts/' +
        (releaseMode ? getProperty('scripts.version') : 'develop')

apply from: 'ui.gradle'
apply from: scriptsUrl + '/release-fat.gradle'
apply from: scriptsUrl + '/signing.gradle'

repositories {
    mavenCentral { url "https://repo1.maven.org/maven2" }
    if (!releaseMode) {
        maven { url 'https://jitpack.io' }
    }
}

configurations {
    implementation.extendsFrom hello
}

dependencyManagement {
    imports {
        mavenBom(releaseMode ? 'com.epam.reportportal:commons-bom:5.12.1' : 'com.epam.reportportal:commons-bom:5.12.1')
    }
}

dependencies {

    if (releaseMode) {
        implementation 'com.epam.reportportal:commons-dao'
        implementation("com.epam.reportportal:plugin-api")
        annotationProcessor 'com.epam.reportportal:plugin-api'
    } else {
        implementation 'com.github.reportportal:commons-dao:develop-SNAPSHOT'
        implementation 'com.github.reportportal:plugin-api:develop-SNAPSHOT'
        annotationProcessor 'com.github.reportportal:plugin-api:develop-SNAPSHOT'
    }

    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.2'

    hello("com.apollographql.apollo3:apollo-runtime:3.8.2")
    hello("com.squareup.okhttp3:okhttp:4.11.0")

    hello group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'

    testImplementation('org.junit.jupiter:junit-jupiter:5.6.0')

}

test {

    useJUnitPlatform()
    jacocoTestReport {
        reports {
            xml.required = true
        }
    }
}

apollo {
    service("service") {
        generateKotlinModels.set(false)
        packageName.set("com.epam.reportportal.extension.monday.model.graphql")
        mapScalar("File", "com.apollographql.apollo3.api.Upload", "com.apollographql.apollo3.api.Adapters.UploadAdapter")
    }
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

build.dependsOn jacocoTestReport

artifacts {
    archives shadowJar
}

sourceSets {

    main {
        resources
                {
                    exclude '**'
                }
    }
}


generatePomFileForShadowPublication { pom.packaging = "jar" }

jar {

    from("src/main/resources") {
        into("/resources")
    }
    from("ui/build") {
        into("/resources")
    }
    manifest {
        attributes(
                "Class-Path": configurations.hello.collect { it.getName() }.join(' '),
                "Plugin-Id": "${pluginId}",
                "Plugin-Version": "${project.version}",
                "Plugin-Provider": "Report Portal",
                "Plugin-Class": "com.epam.reportportal.extension.monday.MondayPlugin",
                "Plugin-Service": "api"
        )
    }
}

shadowJar {
    archiveClassifier.set(null)
    from("src/main/resources") {
        into("/resources")
    }
    from("ui/build") {
        into("/resources")
    }
    configurations = [project.configurations.hello]
    zip64 true
    dependencies {
        exclude(dependency('com.github.reportportal:'))
    }
}

tasks.register('uberJar', Jar) {

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    archiveClassifier = 'uber'

    from sourceSets.main.output

    dependsOn configurations.hello


    from {
        configurations.hello.collect {
            zipTree(it)
        }
    }

    manifest {
        attributes(
                "Class-Path": configurations.hello.collect { it.getName() }.join(' '),
                "Plugin-Id": "${pluginId}",
                "Plugin-Version": "${project.version}",
                "Plugin-Provider": "Report Portal",
                "Plugin-Class": "com.epam.reportportal.extension.monday.MondayPlugin",
                "Plugin-Service": "api"
        )
    }

    from("src/main/resources") {
        into("/resources")
    }
    from("ui/build") {
        into("/resources")
    }
}


task plugin(type: Jar) {
    getArchiveBaseName().set("plugin-${pluginId}")
    into('classes') {
        with jar
    }
    into('lib') {
        from configurations.compileClasspath
    }
    archiveExtension.set('zip')
}

task assemblePlugin(type: Copy) {
    from plugin
    into pluginsDir
}

task assemblePlugins(type: Copy) {
    dependsOn subprojects.assemblePlugin
}

compileJava.dependsOn npm_run_build

